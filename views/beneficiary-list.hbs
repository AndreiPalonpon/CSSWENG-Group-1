<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPPWDFI | Beneficiaries List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/List-style.css">
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
</head>

<body>
    <div id="wrapper">
        <div class="overlay dark_bg"></div>

         <!-- Sidebar -->
        <nav class="navbar navbar-inverse fixed-top" id="sidebar-wrapper" role="navigation">
            <ul class="nav sidebar-nav">
                <div class="sidebar-header">
                    <div class="sidebar-brand">
                        <a href="#">Admin</a>
                        <hr class="navbar-solid">
                    </div>
                </div>
                <li><a href="/">Dashboard</a></li>
                <li><a href="/programs">Programs</a></li>
                <li><a href="/people">People</a></li>
                <li><a href="/benefactors">Benefactor</a></li>
                <li><a href="/benefits">Benefits</a></li>
                <li><a href="/settings">Settings</a></li>
                <li class="logout-link">
                    <form action="/logout" method="POST">
                        <button type="submit" class="btn btn-link logout-btn">
                            <i class="bi bi-box-arrow-right"></i> 
                            Logout
                        </button>
                    </form>
                </li>
            </ul>
        </nav>

        <!-- Header -->
        <div class="bg-half-gradient">
            <header class="bg-gradient">
                <div class="container d-flex align-items-center">
                    <div class="menu-icon mr-3" id="menu-toggle">&#9776;</div>
                    <a href="/">
                        <img src="../images/LPPWDFI-Logo.png" alt="Logo" class="logo mr-3">
                    </a>
                    <div>
                        <h1 class="org-name">Beneficiary</h1>
                    </div>
                </div>

                <div class="createBtn">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#modal-beneficiary-create">Create</button>
                </div>
            </header>
        </div>


        <!-- Main Content -->
        <main class="main-content">
            <h2 class="main-title">Beneficiaries for <a href="/documentation/{{program._id}}">{{program.name}}</a></h2>

            <div class="button-group">
                <button class="btn export-btn" onclick="exportTableToCSV('Beneficiaries.csv')">Export to CSV</button>
            </div>

            <!-- Table List -->
            <div class="table-container">
                <form id="filter-form">
                <button id="resetFiltersButton" class="btn btn-secondary">Reset Filters</button>
                <table class="table table-bordered table-hover">
                    <caption>List of Beneficiaries</caption>
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="recipientDropdown" data-bs-toggle="dropdown" aria-expanded="false">Recipient</a>
                                    <ul class="dropdown-menu" aria-labelledby="recipientDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="recipientSort" value="az" id="recipientSortAZ">
                                                <label class="form-check-label" for="recipientSortAZ">A-Z</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="recipientSort" value="za" id="recipientSortZA">
                                                <label class="form-check-label" for="recipientSortZA">Z-A</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Program Enrolled</th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">Status</a>
                                    <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Active" id="activeStatus" name="statusFilter">
                                                <label class="form-check-label" for="activeStatus">Active</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Terminated" id="terminatedStatus" name="statusFilter">
                                                <label class="form-check-label" for="terminatedStatus">Terminated</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Suspended" id="suspendedStatus" name="statusFilter">
                                                <label class="form-check-label" for="suspendedStatus">Suspended</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Benefit</th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="dateDropdown" data-bs-toggle="dropdown" aria-expanded="false">Date Received</a>
                                    <ul class="dropdown-menu" aria-labelledby="dateDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="dateSort" value="newest" id="dateSortNewest">
                                                <label class="form-check-label" for="dateSortNewest">Newest</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="dateSort" value="oldest" id="dateSortOldest">
                                                <label class="form-check-label" for="dateSortOldest">Oldest</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="programInfo">
                        <!-- Program rows will be populated here -->
                        {{#each beneficiaries}}
                        <tr data-beneficiary-id="{{this._id}}">
                            <th scope="row">{{incremented @index}}</th>
                            <td class="beneficiary-name">{{this.person_registered.name}}</td>
                            <td class="program-enrolled">{{this.program_enrolled.name}}</td>
                            <td class="status">{{this.status}}</td>
                            <td class="benefit-delivered">{{this.benefit_delivered.name}}</td>
                            <td class="date-received">{{formatDate this.date_received}}</td>
                            <td>
                                <button class="editBtn" data-bs-toggle="modal" data-bs-target="#modal-beneficiary-edit"><i class="bi bi-pencil"></i></button>
                                <button class="deleteBtn" data-id="{{this._id}}"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
                </form>
            </div>
        </main>

        <nav aria-label="page-navigation">
            <ul class="pagination">
                <!-- Pagination items will be dynamically added here -->
            </ul>
        </nav>

        <!-- Create Beneficiary Modal -->
<div class="modal fade" id="modal-beneficiary-create">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Fill the Form</h2>
                <button type="button" class="closeBtn" data-bs-dismiss="modal" aria-label="Close">&times;</button>
            </div>
            <div class="modal-body">
                <form id="createBeneficiaryForm" action="/beneficiaries/create" method="POST">
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="personRegistered">Person Registered</label>
                            <select class="form-control" id="personRegistered" name="personRegistered" required>
                                <option value="" selected disabled>Choose...</option>
                                {{#each people}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="programEnrolled">Program Enrolled</label>
                            <!-- Hidden input to hold the program ID -->
                            <input type="hidden" id="programEnrolled" name="programEnrolled" value="{{program._id}}">
                            <!-- Visible, disabled input to display the program name -->
                            <input type="text" class="form-control" value="{{program.name}}" readonly>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="status">Status</label>
                            <select class="form-control" id="status" name="status" required>
                                <option value="" selected disabled>Choose...</option>
                                <!-- Not final. The options can be changed. -->
                                <option value="Active">Active</option>
                                <option value="Suspended">Suspended</option>
                                <option value="Terminated">Terminated</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="benefitDelivered">Benefit Delivered</label>
                            <select class="form-control" id="benefitDelivered" name="benefitDelivered" required>
                                <option value="" selected disabled>Choose...</option>
                                {{#each benefits}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="dateReceived">Date Received</label>
                            <input type="date" class="form-control" id="dateReceived" name="dateReceived" placeholder="Date" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="submitBtn" form="createBeneficiaryForm">Submit</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Beneficiary Modal -->
<div class="modal fade" id="modal-beneficiary-edit" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="editBeneficiaryModalLabel">Edit Beneficiary</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editBeneficiaryForm" action="/beneficiaries/edit" method="POST">
                    <input type="hidden" id="editBeneficiaryId" name="id">
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="editPersonRegistered" class="form-label">Person Registered</label>
                            <select class="form-control" id="editPersonRegistered" name="personRegistered" required>
                                <option value="" selected disabled>Choose...</option>
                                {{#each people}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="form-group col-md-6">
    <label for="editProgramEnrolled" class="form-label">Program Enrolled</label>
    <!-- Dropdown to select the program -->
    <select class="form-control" id="editProgramEnrolled" name="programEnrolled">
        <option value="" disabled selected>Select a program</option>
        <!-- Add options dynamically here -->
        {{#each programs}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
        <!-- Continue adding more options as needed -->
    </select>
</div>


                        <div class="form-group col-md-6">
                            <label for="editStatus" class="form-label">Status</label>
                            <select class="form-control" id="editStatus" name="status" required>
                                <option value="" selected disabled>Choose...</option>
                                <option value="Active">Active</option>
                                <option value="Suspended">Suspended</option>
                                <option value="Terminated">Terminated</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editBenefitDelivered" class="form-label">Benefit Delivered</label>
                            <select class="form-control" id="editBenefitDelivered" name="benefitDelivered" required>
                                <option value="" selected disabled>Choose...</option>
                                {{#each benefits}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editDateReceived" class="form-label">Date Received</label>
                            <input type="date" class="form-control" id="editDateReceived" name="date_received" placeholder="Date" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="submitBtn" form="editBeneficiaryForm">Update</button>
            </div>
        </div>
    </div>
</div>


        <!-- JQuery -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <!-- Bootstrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <!-- External JS -->
        <!-- <script src="/js/beneficiary-list.js"></script> -->
        <script>
            function formatDate(date) {
    let d = new Date(date);
    let fullMonth = d.getMonth() < 10 ? "0" + d.getMonth() : d.getMonth();
    let fullDate = d.getDate() < 10 ? "0" + d.getDate() : d.getDate();
    return d.getFullYear() + '-' + fullMonth + '-' + fullDate;
}

function setSelectedValue(selectObj, valueToSet) {
    for (let i = 0; i < selectObj.options.length; i++) {
        if (selectObj.options[i].text === valueToSet) {
            selectObj.options[i].selected = true;
            return;
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const newMemberAddBtn = document.querySelector('.createBtn button'),
        darkBg = document.querySelector('.dark_bg'),
        popupForm = document.querySelector('.popup'),
        crossBtn = document.querySelector('.closeBtn'),
        submitBtn = document.querySelector('.submitBtn'),
        modalTitle = document.querySelector('.modal-title'),
        form = document.querySelector('#createBeneficiaryForm'),
        formInputFields = document.querySelectorAll('#createBeneficiaryForm input, #createBeneficiaryForm select');

    let originalData = localStorage.getItem('beneficiaries') ? JSON.parse(localStorage.getItem('beneficiaries')) : [];
    let getData = [...originalData];

    let isEdit = false,
        editId;

    document.getElementById("menu-toggle").addEventListener("click", function() {
        document.getElementById("wrapper").classList.toggle("toggled");
        document.querySelector(".main-content").classList.toggle("toggled");
        document.querySelector(".header-right").classList.toggle("toggled");
    });

    // Add event listeners to filter elements
    document.querySelectorAll('input[name="recipientSort"]').forEach(input => {
        input.addEventListener('change', applyFiltersAndSort);
    });
    document.querySelectorAll('input[name="statusFilter"]').forEach(input => {
        input.addEventListener('change', applyFiltersAndSort);
    });
    document.querySelectorAll('input[name="dateSort"]').forEach(input => {
        input.addEventListener('change', applyFiltersAndSort);
    });

    $('#resetFiltersButton').on('click', function() {
        $('#filter-form')[0].reset();
        applyFiltersAndSort();
    });

    newMemberAddBtn.addEventListener('click', () => {
        isEdit = false;
        submitBtn.innerHTML = "Submit";
        modalTitle.innerHTML = "Fill the Form";
        form.reset();
        formInputFields.forEach(input => input.disabled = false);
        submitBtn.style.display = "block";
    });

    crossBtn.addEventListener('click', () => {
        form.reset();
        submitBtn.style.display = "block";
        formInputFields.forEach(input => input.disabled = false);
    });

    form.addEventListener('submit', (e) => {
        e.preventDefault();
        const now = new Date();
        const beneficiary = {
            id: Date.now(),
            personRegistered: form.personRegistered.value,
            programEnrolled: form.programEnrolled.value,
            status: form.status.value,
            benefitDelivered: form.benefitDelivered.value,
            dateReceived: form.dateReceived.value
        };

        if (!isEdit) {
            originalData.push(beneficiary);
        } else {
            originalData[editId] = beneficiary;
        }

        $.post("/beneficiaries/create", beneficiary, (data, status, xhr) => {
            if (status === "success" && xhr.status === 201) {
                alert("Beneficiary has been created.");
                location.reload();
            }
        });

        localStorage.setItem('programs', JSON.stringify(originalData));
        getData = [...originalData];

        location.reload();
        darkBg.classList.remove('active');
        popupForm.classList.remove('active');
        form.reset();
    });

    document.getElementById("editBeneficiaryForm").addEventListener('submit', (e) => {
        e.preventDefault(); // Prevent default form submission
        let beneficiary_id = document.getElementById("editBeneficiaryId").value;
        let person_registered = document.getElementById("editPersonRegistered").value;
        let program_enrolled = document.getElementById("editProgramEnrolled").value;
        let status = document.getElementById("editStatus").value;
        let benefit_delivered = document.getElementById("editBenefitDelivered").value;
        let date_received = document.getElementById("editDateReceived").value;

        let beneficiary = {
            id: beneficiary_id,
            person_registered: person_registered,
            program_enrolled: program_enrolled,
            status: status,
            benefit_delivered: benefit_delivered,
            date_received: date_received
        };

        $.post("/beneficiaries/edit", beneficiary, (data, status, xhr) => {
            if (status === "success" && xhr.status === 200) {
                let modalInstance = bootstrap.Modal.getInstance(document.getElementById("modal-beneficiary-edit"));
                if (modalInstance) {
                    modalInstance.hide();
                }
                alert("Beneficiary updated successfully.");
                location.reload();
            } else {
                alert("Error updating beneficiary");
            }
        }).fail(() => {
            alert("Error updating beneficiary");
        });
    });

    // Edit and delete event handlers
    function addEventListeners() {
        document.querySelectorAll('.editBtn').forEach(button => {
            button.addEventListener('click', (e) => {
                const id = e.currentTarget.closest("tr").getAttribute('data-beneficiary-id');
                editInfo(id, e);
            });
        });
        document.querySelectorAll('.deleteBtn').forEach(button => {
            button.addEventListener('click', (e) => {
                const id = e.currentTarget.getAttribute('data-id');
                deleteInfo(id, e);
            });
        });
    }

    function onBtnEditClick(e) {
        e.preventDefault(); // Prevent default action
        let beneficiary_id = e.currentTarget.closest("tr").getAttribute("data-beneficiary-id");
        let person_registered = e.currentTarget.closest("tr").querySelector("td:nth-child(2)").textContent;
        let program_enrolled = e.currentTarget.closest("tr").querySelector("td:nth-child(3)").textContent;
        let status = e.currentTarget.closest("tr").querySelector("td:nth-child(4)").textContent;
        let benefit_delivered = e.currentTarget.closest("tr").querySelector("td:nth-child(5)").textContent;
        let date_received = e.currentTarget.closest("tr").querySelector("td:nth-child(6)").textContent;

        let modal_edit = document.getElementById("modal-beneficiary-edit");
        let modal_edit_id = modal_edit.querySelector("#editBeneficiaryId");
        let modal_edit_person_registered = modal_edit.querySelector("#editPersonRegistered");
        let modal_edit_program_enrolled = modal_edit.querySelector("#editProgramEnrolled");
        let modal_edit_status = modal_edit.querySelector("#editStatus");
        let modal_edit_benefit_delivered = modal_edit.querySelector("#editBenefitDelivered");
        let modal_edit_date_received = modal_edit.querySelector("#editDateReceived");

        modal_edit_id.value = beneficiary_id;
        modal_edit_person_registered.value = person_registered;
        modal_edit_program_enrolled.value = program_enrolled;
        modal_edit_status.value = status;
        modal_edit_benefit_delivered.value = benefit_delivered;
        modal_edit_date_received.value = formatDate(date_received);

        setSelectedValue(modal_edit_person_registered, person_registered);
        setSelectedValue(modal_edit_benefit_delivered, benefit_delivered);
        setSelectedValue(modal_edit_program_enrolled, program_enrolled);
    }



    function editInfo(id, e) {
        onBtnEditClick(e); // Populate form fields
        isEdit = true;
        editId = getData.findIndex(item => item.id === id);
        const beneficiary = getData[editId];
        if (beneficiary) {
            form.personRegistered.value = beneficiary.personRegistered;
            form.programEnrolled.value = beneficiary.programEnrolled;
            form.status.value = beneficiary.status;
            form.benefitDelivered.value = beneficiary.benefitDelivered;
            form.dateReceived.value = beneficiary.dateReceived;
            modalTitle.innerHTML = "Edit Beneficiary";
            formInputFields.forEach(input => input.disabled = false);
            submitBtn.style.display = "block";
            submitBtn.innerHTML = "Update";
            darkBg.classList.add('active');
            popupForm.classList.add('active');
        }
    }


    function deleteInfo(id, e) {
        if (confirm("Are you sure you want to delete this beneficiary?")) {
            originalData = originalData.filter(item => item.id !== id);
            localStorage.setItem('beneficiaries', JSON.stringify(originalData));

            $.post(`/beneficiaries/delete`, { beneficiary_id: id })
                .done((data, status, xhr) => {
                    if (status === "success" && xhr.status === 200) {
                        alert("Beneficiary has been deleted");
                        location.reload();
                    } else {
                        alert("Failed to delete beneficiary. Please try again.");
                    }
                })
                .fail((xhr, status, error) => {
                    alert("Error deleting beneficiary. Please try again later.");
                    console.error(error);
                });
        }
    }

function applyFiltersAndSort() {
    const recipientSort = $('input[name="recipientSort"]:checked').val() || '';
    const statusFilter = $('input[name="statusFilter"]:checked').map(function() { return this.value; }).get().join(',');
    const dateSort = $('input[name="dateSort"]:checked').val() || '';
    const programId = '{{program._id}}'; // Adjust this as necessary

    let queryString = `?recipientSort=${recipientSort}&statusFilter=${statusFilter}&dateSort=${dateSort}&programId=${programId}`;

    console.log('Query String:', queryString);

    fetch(`/beneficiaries${queryString}`)
        .then(response => response.text())
        .then(html => {
            console.log('Received HTML:', html);
            const newDoc = new DOMParser().parseFromString(html, 'text/html');
            const newTableBody = newDoc.querySelector('.programInfo').innerHTML;
            document.querySelector('.programInfo').innerHTML = newTableBody;
            addEventListeners();
        })
        .catch(error => console.error('Error fetching filtered data:', error));
}
    // Initialize event listeners
    addEventListeners();
});

/* Exporting to CSV function */
function downloadCSV(csv, filename) {
    let csvFile;
    let downloadLink;

    csvFile = new Blob([csv], {
        type: 'text/csv'
    });

    downloadLink = document.createElement('a');
    downloadLink.download = filename;
    downloadLink.href = window.URL.createObjectURL(csvFile);
    downloadLink.style.display = 'none';
    document.body.appendChild(downloadLink);
    downloadLink.click();
}

function exportTableToCSV(filename) {
    const rows = document.querySelectorAll('.table-container table tr');
    let csv = [];
    for (let i = 0; i < rows.length; i++) {
        const row = [],
            cols = rows[i].querySelectorAll('td, th');
        for (let j = 0; j < cols.length; j++) {
            const data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
            row.push('"' + data + '"');
        }
        csv.push(row.join(','));
    }
    downloadCSV(csv.join('\n'), filename);
}
        </script>
</body>

</html>
