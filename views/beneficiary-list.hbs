<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPPWDFI | Beneficiaries List</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/program-list-style.css">
</head>

<body>
    <div id="wrapper">
        <div class="overlay dark_bg"></div>
        <!-- Modal Background -->

         <!-- Sidebar -->
        <nav class="navbar navbar-inverse fixed-top" id="sidebar-wrapper" role="navigation">
            <ul class="nav sidebar-nav">
                <div class="sidebar-header">
                    <div class="sidebar-brand">
                        <a href="#">Admin</a>
                        <hr class="navbar-solid">
                    </div>
                </div>
                <li><a href="/">Dashboard</a></li>
                <li><a href="/programs">Programs</a></li>
                <li><a href="/people">People</a></li>
                <li><a href="/benefactors">Benefactor</a></li>
                <li><a href="/benefits">Benefits</a></li>
                <li><a href="/settings">Settings</a></li>
                <li class="logout-link">
                    <form action="/logout" method="POST">
                        <button type="submit" class="btn btn-link logout-btn">
                            <i class="bi bi-box-arrow-right"></i> 
                            Logout
                        </button>
                    </form>
                </li>
            </ul>
        </nav>
        <!-- /#sidebar-wrapper -->

        <!-- HEADER -->
        <div class="bg-half-gradient">
            <header class="bg-gradient">
                <div class="container d-flex align-items-center">
                    <div class="menu-icon mr-3" id="menu-toggle">&#9776;</div>
                    <a href="../views/dashboard.html">
                        <img src="../images/LPPWDFI-Logo.png" alt="Logo" class="logo mr-3">
                    </a>
                    <div>
                        <h1 class="org-name">Beneficiary</h1>
                    </div>
                </div>

                <div class="addProgramBtn">
                    <button>Create</button>
                </div>
            </header>
        </div>

        <!--MODAL FORM-->
        <div class="popup">
            <header>
                <h2 class="modalTitle">Fill the Form</h2>
                <span class="closeBtn">&times;</span>
            </header>
            <form id="beneficiaryForm" action="/beneficiaries/create" method="POST">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="personRegistered">Person Registered</label>
                        <select class="form-control" id="personRegistered" name="personRegistered" required>
                            <option value="" selected disabled>Choose...</option>
                            {{#each people}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div class="form-group col-md-6">
                        <label for="programEnrolled">Program Enrolled</label>
                        <select class="form-control" id="programEnrolled" name="programEnrolled" required>
                            <option value="" selected disabled>Choose...</option>
                            {{#each programs}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>

                     <div class="form-group col-md-6">
                        <label for="status">Status</label>
                        <select class="form-control" id="status" name="status" required>
                            <option value="" selected disabled>Choose...</option>
                            <!-- Not final. The options can be changed. -->
                            <option value="Active">Active</option>
                            <option value="Suspended">Suspended</option>
                            <option value="Terminated">Terminated</option>
                        </select>
                    </div>

                    <div class="form-group col-md-6">
                        <label for="benefitDelivered">Benefit Delivered</label>
                        <select class="form-control" id="benefitDelivered" name="benefitDelivered" required>
                            <option value="" selected disabled>Choose...</option>
                            {{#each benefits}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div class="form-group col-md-6">
                        <label for="date_received">Date Received</label>
                        <input type="date" class="form-control" id="date_received" name="date_received" placeholder="Date" required>
                    </div>
                </div>
                <input type="submit" class="submitBeneficiaryBtn" value="Submit">
            </form>
        </div>

        <!--2nd Header-->
        <main class="main-content">
            <h2 class="main-title">Beneficiaries for <a href="/documentation/{{program._id}}">{{program.name}}</a></h2>

            <div class="button-group">
                <button class="btn export-btn" onclick="exportTableToCSV('Beneficiaries.csv')">Export to CSV</button>
            </div>

            <!---TABLE LISTS-->
            <div class="table-container">
                <button id="resetFiltersButton" class="btn btn-secondary">Reset Filters</button>
                <table class="table table-bordered table-hover">
                    <caption>List of Beneficiaries</caption>
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Recipient</th>
                            <th scope="col">Program Enrolled</th>
                            <th scope="col">Status</th>
                            <th scope="col">Benefit</th>
                            <th scope="col">Date Received</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="programInfo">
                        <!-- Program rows will be populated here -->
                        {{#each beneficiaries}}
                        <tr>
                            <th scope="row">{{incremented @index}}</th>
                            <td>{{this.person_registered.name}}</td>
                            <td>{{this.program_enrolled.name}}</td>
                            <td>{{this.status}}</td>
                            <td>{{this.benefit_delivered.name}}</td>
                            <td>{{formatDate this.date_received}}</td>
                            <td>
                                <button class="viewBtn" data-id="{{this._id}}"><i class="bi bi-eye"></i></button>
                                <button class="editBtn" data-id="{{this._id}}"><i class="bi bi-pencil"></i></button>
                                <button class="deleteBtn" data-id="{{this._id}}"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </main>

        <nav aria-label="page-navigation">
            <ul class="pagination">
                <!-- Pagination items will be dynamically added here -->
            </ul>
        </nav>

        <!-- JQuery -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <!-- Bootstrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <!-- <script src="../public/js/app.js"></script> -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                document.getElementById("menu-toggle").addEventListener("click", function() {
                    document.getElementById("wrapper").classList.toggle("toggled");
                    document.querySelector(".main-content").classList.toggle("toggled");
                    document.querySelector(".header-right").classList.toggle("toggled");
                });

                $(document).ready(function() {
                    $("#myInput").on("keyup", function() {
                        var value = $(this).val().toLowerCase();
                        $(".dropdown-menu li").filter(function() {
                            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                        });
                    });
                });

                var newMemberAddBtn = document.querySelector('.addProgramBtn button'),
                    darkBg = document.querySelector('.dark_bg'),
                    popupForm = document.querySelector('.popup'),
                    crossBtn = document.querySelector('.closeBtn'),
                    submitBeneficiaryBtn = document.querySelector('.submitBeneficiaryBtn'),
                    modalTitle = document.querySelector('.modalTitle'),
                    form = document.querySelector('#beneficiaryForm'),
                    formInputFields = document.querySelectorAll('#beneficiaryForm input, #beneficiaryForm select'),
                    programInfo = document.querySelector('.programInfo');
                resetFiltersButton = document.getElementById('resetFiltersButton');

                let originalData = localStorage.getItem('beneficiaries') ? JSON.parse(localStorage.getItem('beneficiaries')) : [];
                let getData = [...originalData];

                let isEdit = false,
                    editId;

                newMemberAddBtn.addEventListener('click', () => {
                    isEdit = false;
                    submitBeneficiaryBtn.innerHTML = "Submit";
                    modalTitle.innerHTML = "Fill the Form";
                    form.reset();
                    formInputFields.forEach(input => input.disabled = false);
                    submitBeneficiaryBtn.style.display = "block";
                    darkBg.classList.add('active');
                    popupForm.classList.add('active');
                });

                crossBtn.addEventListener('click', () => {
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                    submitBeneficiaryBtn.style.display = "block";
                    formInputFields.forEach(input => input.disabled = false);
                });

                /*
                form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const program = {
                        id: Date.now(),
                        firstName: form.firstName.value,
                        lastName: form.lastName.value,
                        dob: form.dob.value,
                        gender: form.gender.value,
                        contactNo: form.contactNo.value,
                        barangay: form.barangay.value,
                        disabilityType: form.disabilityType.value,
                        comorbidities: form.comorbidities.value,
                        pwdIdCardNo: form.pwdIdCardNo.value
                    };

                    if (!isEdit) {
                        originalData.push(program);
                    } else {
                        originalData[editId] = program;
                    }
                    localStorage.setItem('programs', JSON.stringify(originalData));
                    getData = [...originalData];
                    showInfo();
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                });
                */

                function showInfo() {
                    //displayRows(getData, currentPage);
                    displayPagination(getData.length);
                    addEventListeners();
                }

                let currentPage = 1;
                const rowsPerPage = 10;

                function displayPagination(totalRows) {
                    const pagination = document.querySelector('.pagination');
                    const totalPages = Math.ceil(totalRows / rowsPerPage);

                    pagination.innerHTML = `
                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" aria-label="Previous" id="prevButton">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>`;

                    for (let i = 1; i <= totalPages; i++) {
                        pagination.innerHTML += `
                            <li class="page-item ${currentPage === i ? 'active' : ''}">
                                <a class="page-link paginationButton" href="#">${i}</a>
                            </li>`;
                    }

                    pagination.innerHTML += `
                        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" aria-label="Next" id="nextButton">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>`;

                    document.getElementById("prevButton").addEventListener("click", prevPage);
                    document.getElementById("nextButton").addEventListener("click", nextPage);

                    const paginationButtons = document.getElementsByClassName("paginationButton");
                    for (let i = 0; i < paginationButtons.length; i++) {
                        paginationButtons[i].addEventListener("click", function(event) {
                            event.preventDefault();
                            goToPage(parseInt(this.textContent));
                        });
                    }
                }

                /* Disabled displayRows function using a comment to make the table display work.
                function displayRows(rows, page = 1) {
                    const start = (page - 1) * rowsPerPage;
                    const end = start + rowsPerPage;
                    const paginatedRows = rows.slice(start, end);
                    programInfo.innerHTML = '';

                    paginatedRows.forEach((program, index) => {
                        const row = `
                            <tr>
                                <td>${start + index + 1}</td>
                                <td>${program.firstName}</td>
                                <td>${program.lastName}</td>
                                <td>${program.dob}</td>
                                <td>${program.gender}</td>
                                <td>${program.contactNo}</td>
                                <td>${program.barangay}</td>
                                <td>${capitalizeFirstLetter(program.disabilityType)}</td>
                                <td>${capitalizeFirstLetter(program.comorbidities)}</td>
                                <td>${program.pwdIdCardNo}</td>
                                <td>
                                    <button class="viewBtn" data-id="${program.id}"><i class="bi bi-eye"></i></button>
                                    <button class="editBtn" data-id="${program.id}"><i class="bi bi-pencil"></i></button>
                                    <button class="deleteBtn" data-id="${program.id}"><i class="bi bi-trash"></i></button>
                                </td>
                            </tr>
                        `;
                        programInfo.innerHTML += row;
                    });

                    function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                    }
                }
                */

                function addEventListeners() {
                    document.querySelectorAll('.viewBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            readInfo(id);
                        });
                    });

                    document.querySelectorAll('.editBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            editInfo(id);
                        });
                    });

                    document.querySelectorAll('.deleteBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.currentTarget.getAttribute('data-id');
                            deleteInfo(id, e);
                        });
                    });

                    // Event listeners for sorting and filtering
                    document.querySelectorAll('input[name="nameSort"]').forEach(radio => {
                        radio.addEventListener('change', () => {
                            sortData();
                            //displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });

                    document.querySelectorAll('input[name="typeFilter"], input[name="frequencyFilter"], input[name="assistanceFilter"]').forEach(checkbox => {
                        checkbox.addEventListener('change', () => {
                            filterData();
                            //displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });

                    document.querySelectorAll('input[name="dobSort"]').forEach((element) => {
                        element.addEventListener('change', sortDOB);
                    });


                    document.querySelectorAll('input[name="genderFilter"]').forEach((element) => {
                        element.addEventListener('change', filterGender);
                    });

                    document.querySelectorAll('input[name="barangayFilter"]').forEach((checkbox) => {
                        checkbox.addEventListener('change', filterBarangay);
                    });

                }

                function prevPage() {
                    if (currentPage > 1) {
                        currentPage--;
                        //displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function nextPage() {
                    const totalPages = Math.ceil(getData.length / rowsPerPage);
                    if (currentPage < totalPages) {
                        currentPage++;
                        //displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function goToPage(page) {
                    currentPage = page;
                    //displayRows(getData, currentPage);
                    displayPagination(getData.length);
                }

                function readInfo(id) {
                    const beneficiary = getData.find(item => item.id === id);
                    if (beneficiary) {
                        form.firstName.value = beneficiary.firstName;
                        form.lastName.value = beneficiary.lastName;
                        form.dob.value = beneficiary.dob;
                        form.gen.value = beneficiary.gen;
                        form.contactNo.value = beneficiary.contactNo;
                        form.brgy.value = beneficiary.brgy;
                        form.disability.value = beneficiary.disability;
                        form.comor.value = beneficiary.comor;
                        form.pwdIdCardNo.value = beneficiary.pwdIdCardNo;
                        modalTitle.innerHTML = "View Beneficiary";
                        formInputFields.forEach(input => input.disabled = true);
                        submitBeneficiaryBtn.style.display = "none";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function editInfo(id) {
                    isEdit = true;
                    editId = getData.findIndex(item => item.id === id);
                    const beneficiary = getData[editId];
                    if (beneficiary) {
                        form.firstName.value = beneficiary.firstName;
                        form.lastName.value = beneficiary.lastName;
                        form.dob.value = beneficiary.dob;
                        form.gen.value = beneficiary.gen;
                        form.contactNo.value = beneficiary.contactNo;
                        form.brgy.value = beneficiary.brgy;
                        form.disability.value = beneficiary.disability;
                        form.comor.value = beneficiary.comor;
                        form.pwdIdCardNo.value = beneficiary.pwdIdCardNo;
                        modalTitle.innerHTML = "Edit Beneficiary";
                        formInputFields.forEach(input => input.disabled = false);
                        submitBeneficiaryBtn.style.display = "block";
                        submitBeneficiaryBtn.innerHTML = "Update";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function deleteInfo(id, e) {
                    if (confirm("Are you sure you want to delete this beneficiary?")) {
                        originalData = originalData.filter(item => item.id !== id);
                        localStorage.setItem('programs', JSON.stringify(originalData));
                        getData = [...originalData];
                        //showInfo();
                        let index = e?.currentTarget?.closest("tr")?.querySelector("td:first-child")?.textContent;
                        console.log("Deleting the selected beneficiary...");
                        $.post(`/beneficiaries/delete`, {beneficiary_id: id}, (data, status, xhr) => {
                            if (status === "success" && xhr.status === 200) {
                                alert("Beneficiary with ID " + index + " has been deleted");
                            } else {
                                alert("Error: Beneficiary with ID " + index + " cannot be deleted");
                            }
                            location.reload();
                        });
                        e.currentTarget.closest("tr").remove();
                    }
                }

                function sortData() {
                    const selectedSortElement = document.querySelector('input[name="nameSort"]:checked');
                    const selectedSort = selectedSortElement.value;
                    const criterion = selectedSortElement.getAttribute('data-criterion');

                    getData.sort((a, b) => {
                        if (selectedSort === 'az') {
                            return a[criterion].localeCompare(b[criterion]);
                        } else {
                            return b[criterion].localeCompare(a[criterion]);
                        }
                    });
                    showInfo();
                }

                function sortDOB() {
                    const selectedSort = document.querySelector('input[name="dobSort"]:checked').value;
                    getData.sort((a, b) => {
                        const dateA = new Date(a.dob);
                        const dateB = new Date(b.dob);
                        if (selectedSort === 'asc') {
                            return dateA - dateB;
                        } else {
                            return dateB - dateA;
                        }
                    });
                    showInfo();
                }

                function filterGender() {
                    const selectedGender = document.querySelector('input[name="genderFilter"]:checked').value;

                    if (selectedGender === 'all') {
                        getData = [...originalData]; // Reset to original data
                    } else {
                        getData = originalData.filter(item => item.gender.toLowerCase() === selectedGender);
                    }

                    showInfo();
                }

                function filterBarangay() {
                    let filteredData = [...originalData];
                    const selectedBarangays = Array.from(document.querySelectorAll('input[name="barangayFilter"]:checked')).map(check => check.value);

                    if (selectedBarangays.length === 0) {
                        filteredData = [...originalData];
                    } else {
                        filteredData = filteredData.filter(program => selectedBarangays.includes(program.brgy));
                    }

                    getData = [...filteredData];
                    showInfo();
                }


                function filterData() {
                    let filteredData = [...originalData];

                    const selectedTypes = Array.from(document.querySelectorAll('input[name="typeFilter"]:checked')).map(check => check.value);
                    if (selectedTypes.length > 0) {
                        filteredData = filteredData.filter(program => selectedTypes.includes(program.programType));
                    }

                    const selectedFrequencies = Array.from(document.querySelectorAll('input[name="frequencyFilter"]:checked')).map(check => check.value);
                    if (selectedFrequencies.length > 0) {
                        filteredData = filteredData.filter(program => selectedFrequencies.includes(program.frequency));
                    }

                    const selectedAssistances = Array.from(document.querySelectorAll('input[name="assistanceFilter"]:checked')).map(check => check.value);
                    if (selectedAssistances.length > 0) {
                        filteredData = filteredData.filter(program => selectedAssistances.includes(program.assistanceType));
                    }

                    getData = filteredData;
                    showInfo();
                }

                resetFiltersButton.addEventListener('click', () => {
                    document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
                        input.checked = false;
                    });

                    getData = [...originalData];
                    showInfo();
                });

                //displayRows(getData, currentPage);
                displayPagination(getData.length);
                addEventListeners();
            });

            /* Exporting to CSV function */
            function downloadCSV(csv, filename) {
                let csvFile;
                let downloadLink;

                csvFile = new Blob([csv], {
                    type: 'text/csv'
                });

                downloadLink = document.createElement('a');
                downloadLink.download = filename;
                downloadLink.href = window.URL.createObjectURL(csvFile);
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
            }

            function exportTableToCSV(filename) {
                const rows = document.querySelectorAll('.table-container table tr');
                let csv = [];
                for (let i = 0; i < rows.length; i++) {
                    const row = [],
                        cols = rows[i].querySelectorAll('td, th');
                    for (let j = 0; j < cols.length; j++) {
                        const data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
                        row.push('"' + data + '"');
                    }
                    csv.push(row.join(','));
                }
                downloadCSV(csv.join('\n'), filename);
            }

            /**Contact Number**/
            document.addEventListener('DOMContentLoaded', function() {
                var contactNoInput = document.getElementById('contactNo');

                contactNoInput.addEventListener('focus', function() {
                    if (!contactNoInput.value.startsWith('+63')) {
                        contactNoInput.value = '+63 ';
                    }
                });

                contactNoInput.addEventListener('input', function() {
                    if (!contactNoInput.value.startsWith('+63')) {
                        contactNoInput.value = '+63 ' + contactNoInput.value.replace(/^\+63\s*/, '');
                    }
                    if (contactNoInput.value.length > 14) {
                        contactNoInput.value = contactNoInput.value.slice(0, 14);
                    }
                });
            });

            /*Barangay Dropdown*/
            document.addEventListener('DOMContentLoaded', function() {
                const barangays = [
                    "ALMANZA UNO",
                    "B. F. INTERNATIONAL/CAA",
                    "DANIEL FAJARDO",
                    "ILAYA",
                    "MANUYO UNO",
                    "MANUYO DOS",
                    "PAMPLONA UNO",
                    "PAMPLONA DOS",
                    "PAMPLONA TRES",
                    "PILAR",
                    "PULANGLUPA UNO",
                    "PULANGLUPA DOS",
                    "TALON UNO",
                    "TALON DOS",
                    "TALON TRES",
                    "TALON KUATRO",
                    "TALON SINGKO"
                ];

                const barangaySelect = document.getElementById('brgy');
                const barangayDropdownMenu = document.getElementById('barangayDropdownMenu');

                barangays.forEach((brgy, index) => {
                    const option = document.createElement('option');
                    option.value = brgy;
                    option.textContent = brgy;
                    barangaySelect.appendChild(option);

                    // Populate checkbox list
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="${brgy}" id="barangayCheck${index}" name="barangayFilter">
                            <label class="form-check-label" for="barangayCheck${index}">
                                ${brgy}
                            </label>
                        </div>
                    `;
                    barangayDropdownMenu.appendChild(listItem);
                });
            });
        </script>
</body>

</html>
