<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPPWDFI | Benefactors List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/benefactor-list-style.css">
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
</head>

<body>
    <div id="wrapper">
        <div class="overlay dark_bg"></div>

        <!-- Sidebar -->
        <nav class="navbar navbar-inverse fixed-top" id="sidebar-wrapper" role="navigation">
            <ul class="nav sidebar-nav">
                <div class="sidebar-header">
                    <div class="sidebar-brand">
                        <a href="#">Admin</a>
                        <hr class="navbar-solid">
                    </div>
                </div>
                <li><a href="/">Dashboard</a></li>
                <li><a href="/programs">Programs</a></li>
                <li><a href="/beneficiaries">Beneficiary</a></li>
                <li><a href="/benefactors">Benefactor</a></li>
                <li><a href="/benefits">Benefits</a></li>
                <li><a href="/settings">Settings</a></li>
                <li class="logout-link">
                    <form action="/logout" method="POST">
                        <button type="submit" class="btn btn-link logout-btn">
                            <i class="bi bi-box-arrow-right"></i> 
                            Logout
                        </button>
                    </form>
                </li>
            </ul>
        </nav>

        <!-- Header -->
        <div class="bg-half-gradient">
            <header class="bg-gradient">
                <div class="container d-flex align-items-center">
                    <div class="menu-icon mr-3" id="menu-toggle">&#9776;</div>
                    <a href="../views/dashboard.html">
                        <img src="../images/LPPWDFI-Logo.png" alt="Logo" class="logo mr-3">
                    </a>
                    <div>
                        <h1 class="org-name">Benefactors</h1>
                    </div>
                </div>
                <div class="addProgramBtn">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#modal-benefactor-create">Create</button>
                </div>
            </header>
        </div>

        <!-- Main Content -->
        <main class="main-content">
            <h2 class="main-title">Benefactors List</h2>
            <div class="button-group">
                <button class="btn export-btn" onclick="exportTableToCSV('Benefactors.csv')">Export to CSV</button>
            </div>

            <!---TABLE LISTS-->
            <div class="table-container">
                <button id="resetFiltersButton" class="btn btn-secondary">Reset Filters</button>
                <table class="table table-bordered table-hover">
                    <caption>List of Benefactors</caption>
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="benefactorNameDropdown" data-bs-toggle="dropdown" aria-expanded="false">Benefactor Name</a>
                                    <ul class="dropdown-menu" aria-labelledby="benefactorNameDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="az" id="benefactorNameSortAZ">
                                                <label class="form-check-label" for="benefactorNameSortAZ">A-Z</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="za" id="benefactorNameSortZA">
                                                <label class="form-check-label" for="benefactorNameSortZA">Z-A</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="typeDropdown" data-bs-toggle="dropdown" aria-expanded="false">Benefactor Type</a>
                                    <ul class="dropdown-menu" aria-labelledby="typeDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Type1" id="type1Check" name="typeFilter">
                                                <label class="form-check-label" for="type1Check">Type 1</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Type2" id="type2Check" name="typeFilter">
                                                <label class="form-check-label" for="type2Check">Type 2</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Type3" id="type3Check" name="typeFilter">
                                                <label class="form-check-label" for="type3Check">Type 3</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="Type4" id="type4Check" name="typeFilter">
                                                <label class="form-check-label" for="type4Check">Type 4</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Benefactor rows will be populated here -->
                        <!--
                        {{#each benefactors}}
                        <tr data-benefactor-id="{{this.id}}">
                            <td class="benefactor-index">{{incremented @index}}</td>
                            <td class="benefactor-name"><a href="/benefactors/{{this.id}}">{{this.benefactorName}}</a></td>
                            <td class="benefactor-type">{{this.benefactorType}}</td>
                            <td class="benefactor-controls">
                                <button class="editBtn" data-bs-toggle="modal" data-bs-target="#modal-benefactor-edit"><i class="bi bi-pencil"></i></button>
                                <button class="deleteBtn"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>

                        {{/each}}
                        -->
                    </tbody>
                </table>
            </div>
        </main>

        <nav aria-label="page-navigation">
            <ul class="pagination">
                <!-- Pagination items will be dynamically added here -->
            </ul>
        </nav>


        <!-- Create Benefactor Modal -->
        <div class="modal fade" id="modal-benefactor-create">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">Create a Benefactor</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="benefactorForm" action="/benefactors/create" method="POST">
                            <div class="row">
                                <div class="form-group col-md-6">
                                    <label for="benefactorName">Benefactor Name</label>
                                    <input type="text" class="form-control" name="benefactorName" placeholder="Benefactor Name" required>
                                </div>

                                <div class="form-group col-md-6">
                                    <label for="benefactorType">Benefactor Type</label>
                                    <select name="benefactorType" class="form-control" required>
                                        <option value="" selected disabled>Choose...</option>
                                        <option value="Type1">Type 1</option>
                                        <option value="Type2">Type 2</option>
                                        <option value="Type3">Type 3</option>
                                        <option value="Type4">Type 4</option>
                                    </select>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="submitBtn" form="benefactorForm">Submit</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Benefactor Modal -->
        <div class="modal fade" id="modal-benefactor-edit" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title" id="editBenefactorModalLabel">Edit Benefactor</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editBenefactorForm" action="/benefactors/edit" method="POST">
                            <input type="hidden" id="editBenefactorId" name="id">
                            <div class="row">
                                <div class="form-group col-md-6">
                                    <label for="editBenefactorName" class="form-label">Benefactor Name</label>
                                    <input type="text" class="form-control" id="editBenefactorName" name="benefactorName">
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="editBenefactorType" class="form-label">Benefactor Type</label>
                                    <select class="form-control" id="editBenefactorType" name="benefactorType">
                                        <option value="Type1">Type 1</option>
                                        <option value="Type2">Type 2</option>
                                        <option value="Type3">Type 3</option>
                                        <option value="Type4">Type 4</option>
                                    </select>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="submitBtn" form="editBenefactorForm">Update</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- JQuery -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <!-- Bootstrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
        <!-- <script src="/js/benefactor-list.js"></script> -->
        <script>
document.addEventListener('DOMContentLoaded', function() {
    // Toggle Menu
    document.getElementById("menu-toggle").addEventListener("click", function() {
        document.getElementById("wrapper").classList.toggle("toggled");
        document.querySelector(".main-content").classList.toggle("toggled");
        document.querySelector(".header-right").classList.toggle("toggled");
    });

    // jQuery function for filtering dropdown menu
    $(document).ready(function() {
        $("#myInput").on("keyup", function() {
            var value = $(this).val().toLowerCase();
            $(".dropdown-menu li").filter(function() {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
            });
        });
    });

    // Selectors for form elements and filters
    const nameSortAZ = document.getElementById('benefactorNameSortAZ');
    const nameSortZA = document.getElementById('benefactorNameSortZA');
    const typeFilters = document.querySelectorAll('input[name="typeFilter"]');
    const form = document.querySelector('#benefactorForm');
    const submitBtn = document.querySelector('.submitBtn');
    const formInputFields = document.querySelectorAll('#benefactorForm input, #benefactorForm select');

    // Initialize data from localStorage
    let originalData = localStorage.getItem('benefactors') ? JSON.parse(localStorage.getItem('benefactors')) : [];
    let getData = [...originalData];

    let isEdit = false,
        editId;

    // Event listener for benefactor form submission
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        const now = new Date();
        const benefactor = {
            id: Date.now(),
            benefactorName: form.benefactorName.value,
            benefactorType: form.benefactorType.value,
            dateCreated: now.toLocaleDateString(),
            lastUpdated: now.toLocaleDateString() + ' ' + now.toLocaleTimeString()
        };

        if (!isEdit) {
            originalData.push(benefactor);
        } else {
            originalData[editId] = benefactor;
        }

        // Simulated POST request
        $.post("/benefactors/create", benefactor, (data, status, xhr) => {
            if (status === "success" && xhr.status === 201) {
                alert("Benefactor \"" + benefactor.benefactorName + "\" has been created.");
            }
        }).fail(() => {
            alert("Error creating benefactor");
        });

        localStorage.setItem('benefactors', JSON.stringify(originalData));
        getData = [...originalData];
        let modal_benefactor_create = document.querySelector("#modal-benefactor-create");
        bootstrap.Modal.getInstance(modal_benefactor_create).hide();
        form.reset();

        // Update and re-render benefactor list
        updateHandlebarsTemplate(originalData);
    });

    document.getElementById("editBenefactorForm").addEventListener('submit', (e) => {
        e.preventDefault();
        const benefactor_id = parseInt(document.getElementById("editBenefactorId").value);
        const benefactor_name = document.getElementById("editBenefactorName").value;
        const benefactor_type = document.getElementById("editBenefactorType").value;

        const originalBenefactor = originalData.find(benef => benef.id === benefactor_id);

        const benefactor = {
            id: benefactor_id,
            benefactorName: benefactor_name,
            benefactorType: benefactor_type,
            dateCreated: originalBenefactor.dateCreated,
            lastUpdated: new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString()
        };

        const index = originalData.findIndex(benef => benef.id === benefactor.id);
        originalData[index] = benefactor;

        localStorage.setItem('benefactors', JSON.stringify(originalData));
        getData = [...originalData];

        $.post("/benefactors/edit", benefactor, (data, status, xhr) => {
            if (status === "success" && xhr.status === 200) {
                alert("Update benefactor successfully.");
                bootstrap.Modal.getInstance(document.getElementById("modal-benefactor-edit")).hide();
                renderBenefactors(getData);
            } else {
                alert("Error updating benefactor");
            }
        }).fail(() => {
            alert("Error updating benefactor in server");
        });

        let modal_benefactor_edit = document.querySelector("#modal-benefactor-edit");
        bootstrap.Modal.getInstance(modal_benefactor_edit).hide();
        form.reset();

        updateHandlebarsTemplate(originalData);
    });

    function addEventListeners() {
        document.querySelectorAll('.editBtn').forEach(button => {
            button.addEventListener('click', (e) => {
                const id = e.currentTarget.closest("tr").getAttribute('data-benefactor-id');
                editInfo(id, e);
            });
        });
        document.querySelectorAll('.deleteBtn').forEach(button => {
            button.addEventListener('click', (e) => {
                const id = e.currentTarget.closest("tr").getAttribute('data-benefactor-id');
                deleteInfo(id, e);
            });
        });
    }

    function onBtnEditClick(e) {
        let benefactor_id = e.currentTarget.closest("tr").getAttribute("data-benefactor-id");
        let benefactor_name = e.currentTarget.closest("tr").querySelector(".benefactor-name > a").textContent;
        let benefactor_type = e.currentTarget.closest("tr").querySelector(".benefactor-type").textContent;

        let modal_edit = document.getElementById("modal-benefactor-edit");
        let modal_edit_id = modal_edit.querySelector("#editBenefactorId");
        let modal_edit_name = modal_edit.querySelector("#editBenefactorName");
        let modal_edit_type = modal_edit.querySelector("#editBenefactorType");

        modal_edit_id.value = benefactor_id;
        modal_edit_name.value = benefactor_name;
        modal_edit_type.value = benefactor_type;
    }

    // Function to populate form with benefactor details for editing
    function editInfo(id, e) {
        onBtnEditClick(e);
        isEdit = true;
        editId = getData.findIndex(item => item.id === id);
        const benefactor = getData[editId];
        if (benefactor) {
            form.benefactorName.value = benefactor.benefactorName;
            form.benefactorType.value = benefactor.benefactorType;
            formInputFields.forEach(input => input.disabled = false);
            submitBtn.style.display = "block";
            submitBtn.innerHTML = "Update";
            darkBg.classList.add('active');
            popupForm.classList.add('active');
        }
    }

    function deleteInfo(id, e) {
        if (confirm("Are you sure you want to delete this benefactor?")) {
            id = parseInt(id);
            originalData = originalData.filter(item => item.id !== id);
            localStorage.setItem('benefactors', JSON.stringify(originalData));
            getData = [...originalData];
            e.currentTarget.closest("tr").remove();
            $.post("/benefactors/delete", { benefactor_id: id }, (data, status, xhr) => {
                if (status === "success" && xhr.status === 200) {
                    alert("Benefactor has been deleted");
                }
            });
            e.currentTarget.closest("tr").remove();
            updateHandlebarsTemplate(originalData);
        }
    }

    const getSelectedValues = (inputs) => {
        return Array.from(inputs).filter(input => input.checked).map(input => input.value);
    };

    // Function to filter and sort benefactors based on filters and sort options
    const filterAndSortBenefactors = () => {
        let filteredBenefactors = [...originalData];

        const typeValues = getSelectedValues(typeFilters);
        if (typeValues.length > 0) {
            filteredBenefactors = filteredBenefactors.filter(benefactor => typeValues.includes(benefactor.benefactorType));
        }

        if (nameSortAZ.checked) {
            filteredBenefactors.sort((a, b) => a.benefactorName.localeCompare(b.benefactorName));
        } else if (nameSortZA.checked) {
            filteredBenefactors.sort((a, b) => b.benefactorName.localeCompare(a.benefactorName));
        }

        // Update and re-render benefactor list
        updateHandlebarsTemplate(filteredBenefactors);
    };

    // Function to update Handlebars template with benefactors data
    function updateHandlebarsTemplate(benefactors) {
        const tableBody = document.querySelector('tbody');

        // Clear existing content
        tableBody.innerHTML = '';

        // Iterate over benefactors and append rows to the tbody
        benefactors.forEach((benefactor, index) => {
            const row = document.createElement('tr');
            row.setAttribute('data-benefactor-id', benefactor.id);

            row.innerHTML = `
                <td class="benefactor-index">${index + 1}</td>
                <td class="benefactor-name"><a href="/benefactors">${benefactor.benefactorName}<a></td>
                <td class="benefactor-type">${benefactor.benefactorType}</td>
                <td class="benefactor-controls">
                    <button class="editBtn" data-bs-toggle="modal" data-bs-target="#modal-benefactor-edit"><i class="bi bi-pencil"></i></button>
                    <button class="deleteBtn"><i class="bi bi-trash"></i></button>
                </td>
            `;

            tableBody.appendChild(row);
        });

        addEventListeners(); // Re-add event listeners after updating the content
    }

    const resetFilters = () => {
        nameSortAZ.checked = false;
        nameSortZA.checked = false;
        typeFilters.forEach(filter => filter.checked = false);
        updateHandlebarsTemplate(originalData);
    };

    // Event listeners for sorting and filtering options
    nameSortAZ.addEventListener('change', filterAndSortBenefactors);
    nameSortZA.addEventListener('change', filterAndSortBenefactors);
    typeFilters.forEach(filter => filter.addEventListener('change', filterAndSortBenefactors));
    resetFiltersButton.addEventListener('click', resetFilters);

    // Initial rendering of benefactors on page load
    updateHandlebarsTemplate(originalData);
});

/* Exporting to CSV function */
function downloadCSV(csv, filename) {
    let csvFile;
    let downloadLink;
    csvFile = new Blob([csv], {
        type: 'text/csv'
    });

    downloadLink = document.createElement('a');
    downloadLink.download = filename;
    downloadLink.href = window.URL.createObjectURL(csvFile);
    downloadLink.style.display = 'none';
    document.body.appendChild(downloadLink);
    downloadLink.click();
}

function exportTableToCSV(filename) {
    const rows = document.querySelectorAll('.table-container table tr');
    let csv = [];
    for (let i = 0; i < rows.length; i++) {
        const row = [],
            cols = rows[i].querySelectorAll('td, th');
        for (let j = 0; j < cols.length; j++) {
            const data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
            row.push('"' + data + '"');
        }
        csv.push(row.join(','));
    }
    downloadCSV(csv.join('\n'), filename);
}

</script>

</body>

</html>

<!-- OLD HBS TEMPLATE (The old js script is in the public/js/benefactor-list.js) -->
<!-- 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPPWDFI | Benefactors List</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/benefactor-list-style.css">
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
</head>

<body>
    <div id="wrapper">
        <div class="overlay dark_bg"></div>

        <nav class="navbar navbar-inverse fixed-top" id="sidebar-wrapper" role="navigation">
            <ul class="nav sidebar-nav">
                <div class="sidebar-header">
                    <div class="sidebar-brand">
                        <a href="#">Admin</a>
                        <hr class="navbar-solid">
                    </div>
                </div>
                <li><a href="/">Dashboard</a></li>
                <li><a href="/programs">Programs</a></li>
                <li><a href="/beneficiaries">Beneficiary</a></li>
                <li><a href="/benefactors">Benefactor</a></li>
                <li><a href="/benefits">Benefits</a></li>
                <li><a href="/settings">Settings</a></li>
                <li class="logout-link">
                    <form action="/logout" method="POST">
                        <button type="submit" class="btn btn-link logout-btn">
                            <i class="bi bi-box-arrow-right"></i> 
                            Logout
                        </button>
                    </form>
                </li>
            </ul>
        </nav>

        <div class="bg-half-gradient">
            <header class="bg-gradient">
                <div class="container d-flex align-items-center">
                    <div class="menu-icon mr-3" id="menu-toggle">&#9776;</div>
                    <a href="../views/dashboard.html">
                        <img src="../images/LPPWDFI-Logo.png" alt="Logo" class="logo mr-3">
                    </a>
                    <div>
                        <h1 class="org-name">Benefactors</h1>
                    </div>
                </div>
                <div class="addBenefactorBtn">
                    <button id="CreateBtn">Create</button>
                </div>
            </header>
        </div>

        <div class="popup">
            <header>
                <h2 class="modalTitle">Fill the Form</h2>
                <span class="closeBtn">&times;</span>
            </header>
            <form id="benefactorForm" action="/benefactors/create" method="POST" onsubmit="setTimeout(function(){window.location.reload();},100);">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="benefactorName">Benefactor Name</label>
                        <input type="text" class="form-control" id="benefactorName" name="benefactorName" placeholder="Benefactor Name" required>
                    </div>

                    <div class="form-group col-md-6">
                        <label for="benefactorType">Benefactor Type</label>
                        <select class="form-control" id="benefactorType" name="benefactorType" required>
                            <option value="" selected disabled>Choose...</option>
                            <option value="Type1">Type 1</option>
                            <option value="Type2">Type 2</option>
                            <option value="Type3">Type 3</option>
                            <option value="Type4">Type 4</option>
                        </select>
                    </div>
                </div>
                <input type="submit" class="submitBenefactorBtn" value="Submit">
            </form>
        </div>

        <main class="main-content">
            <h2 class="main-title">Benefactors List</h2>
            <div class="button-group">
                <button class="btn export-btn" onclick="exportTableToCSV('Benefactors.csv')">Export to CSV</button>
            </div>

            <div class="table-container">
                <button id="resetFiltersButton" class="btn btn-secondary">Reset Filters</button>
                <table class="table table-bordered table-hover">
                    <caption>List of Benefactors</caption>
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="benefactorNameDropdown" data-bs-toggle="dropdown" aria-expanded="false">Given By</a>
                                    <ul class="dropdown-menu" aria-labelledby="benefactorNameDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="az" data-criterion="benefactorName" id="benefactorNameSortAZ">
                                                <label class="form-check-label" for="benefactorNameSortAZ">A-Z</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="za" data-criterion="benefactorName" id="benefactorNameSortZA">
                                                <label class="form-check-label" for="benefactorNameSortZA">Z-A</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>

                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="typeDropdown" data-bs-toggle="dropdown" aria-expanded="false">Benefactor Type</a>
                                    <ul class="dropdown-menu" aria-labelledby="typeDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type1" id="type1Check" name="typeFilter">
                                                <label class="form-check-label" for="type1Check">Type 1</label>
                                            </div>
                                        </li>

                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type2" id="type2Check" name="typeFilter">
                                                <label class="form-check-label" for="type2Check">Type 2</label>
                                            </div>
                                        </li>

                                         <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type3" id="type3Check" name="typeFilter">
                                                <label class="form-check-label" for="type3Check">Type 3</label>
                                            </div>
                                        </li>

                                         <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type4" id="type4Check" name="typeFilter">
                                                <label class="form-check-label" for="type4Check">Type 4</label>
                                            </div>
                                        </li>

                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each benefactors}}
                        <tr>
                            <th scope="row ">{{incremented @index}}</th>
                            <td>{{this.name}}</td>
                            <td>{{this.type}}</td>
                            <td>
                               <button class="editBtn" data-id="{{this._id}}"><i class="bi bi-pencil"></i></button>
                               <button class="deleteBtn" data-id="{{this._id}}"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </main>
        
        <nav aria-label="page-navigation">
            <ul class="pagination">
                // Pagination items will be dynamically added here 
            </ul>
        </nav>

        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script>

            /* 
           document.addEventListener('DOMContentLoaded', function() {
                document.getElementById("menu-toggle").addEventListener("click", function() {
                    document.getElementById("wrapper").classList.toggle("toggled");
                    document.querySelector(".main-content").classList.toggle("toggled");
                    document.querySelector(".header-right").classList.toggle("toggled");
                });

                $(document).ready(function() {
                    $("#myInput").on("keyup", function() {
                        var value = $(this).val().toLowerCase();
                        $(".dropdown-menu li").filter(function() {
                            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                        });
                    });
                });

              var newMemberAddBtn = document.querySelector('.addBenefactorBtn button'),
                    darkBg = document.querySelector('.dark_bg'),
                    popupForm = document.querySelector('.popup'),
                    crossBtn = document.querySelector('.closeBtn'),
                    submitBenefactorBtn = document.querySelector('.submitBenefactorBtn'),
                    modalTitle = document.querySelector('.modalTitle'),
                    form = document.querySelector('#benefactorForm'),
                    formInputFields = document.querySelectorAll('#benefactorForm input, #benefactorForm select'),
                    benefactorInfo = document.querySelector('.benefactorInfo');
                    resetFiltersButton = document.getElementById('resetFiltersButton');

                // Retrieve data from local storage or initialize empty array
                let originalData = localStorage.getItem('programs') ? JSON.parse(localStorage.getItem('programs')) : [];
                let getData = [...originalData];

                let isEdit = false,
                    editId;

                newMemberAddBtn.addEventListener('click', () => {
                    // Show form for adding new benefactor
                    isEdit = false;
                    submitBenefactorBtn.innerHTML = "Submit";
                    modalTitle.innerHTML = "Fill the Form";
                    form.reset();
                    formInputFields.forEach(input => input.disabled = false);
                    submitBenefactorBtn.style.display = "block";
                    darkBg.classList.add('active');
                    popupForm.classList.add('active');
                });


                 crossBtn.addEventListener('click', () => {
                    // Hide form and reset inputs
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                    submitBenefactorBtn.style.display = "block";
                    formInputFields.forEach(input => input.disabled = false);
                });

                
               form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const now = new Date();
                    const benefactor = {
                        id: Date.now(),
                        benefactorName: form.benefactorName.value,
                        benefactorType: form.benefactorType.value
                    };

                    if (!isEdit) {
                        originalData.push(benefactor);
                    } else {
                        originalData[editId] = benefactor;
                    }

                    $.post("/benefactors/create", benefactor, (data, status, xhr) => {
                        if (status === "success" && xhr.status === 201) {
                            alert("Program \"" + benefactor.benefactorName + "\" has been created.");
                        }
                    });

                    localStorage.setItem('programs', JSON.stringify(originalData));
                    getData = [...originalData];
                    //showInfo();
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                }); 
                

                 function showInfo() {
                    displayRows(getData, currentPage);
                    displayPagination(getData.length);
                    addEventListeners();
                }

                let currentPage = 1;
                const rowsPerPage = 5;

                function displayPagination(totalRows) {
                    const pagination = document.querySelector('.pagination');
                    const totalPages = Math.ceil(totalRows / rowsPerPage);

                    pagination.innerHTML = `
                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" aria-label="Previous" id="prevButton">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        `;

                    for (let i = 1; i <= totalPages; i++) {
                        pagination.innerHTML += `
                        <li class="page-item ${currentPage === i ? 'active' : ''}">
                            <a class="page-link paginationButton" href="#">${i}</a>
                        </li>
                        `;
                    }

                    pagination.innerHTML += `
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" aria-label="Next" id="nextButton">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    `;

                    document.getElementById("prevButton").addEventListener("click", prevPage);
                    document.getElementById("nextButton").addEventListener("click", nextPage);

                    const paginationButtons = document.getElementsByClassName("paginationButton");
                    for (let i = 0; i < paginationButtons.length; i++) {
                        paginationButtons[i].addEventListener("click", function(event) {
                            event.preventDefault();
                            goToPage(parseInt(this.textContent));
                        });
                    }
                }

                function displayRows(rows, page = 1) {
                    const start = (page - 1) * rowsPerPage;
                    const end = start + rowsPerPage;
                    const paginatedRows = rows.slice(start, end);
                    const benefactorInfo = document.querySelector('.benefactorInfo');
                    benefactorInfo.innerHTML = '';
                    paginatedRows.forEach((benefactor, index) => {
                        const row = `
                <tr>
                    <td>${start + index + 1}</td>
                    <td>${benefactor.benefactorName}</td>
                    <td>${benefactor.benefactorType}</td>
                    <td>
                        <button class="viewBtn" data-id="${benefactor.id}"><i class="bi bi-eye"></i></button>
                        <button class="editBtn" data-id="${benefactor.id}"><i class="bi bi-pencil"></i></button>
                        <button class="deleteBtn" data-id="${benefactor.id}"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
                `;
                    benefactorInfo.innerHTML += row;
                });

                    function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                    }
                }

                function addEventListeners() {
                    document.querySelectorAll('.viewBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            readInfo(id);
                        });
                    });

                    document.querySelectorAll('.viewBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            readInfo(id);
                        });
                    });
                    document.querySelectorAll('.editBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.currentTarget.getAttribute('data-id');
                            editInfo(id);
                        });
                    });
                    document.querySelectorAll('.deleteBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.currentTarget.getAttribute('data-id');
                            deleteInfo(id, e);
                        });
                    });
                    // Event listeners for sorting and filtering
                    document.querySelectorAll('input[name="nameSort"]').forEach(radio => {
                        radio.addEventListener('change', () => {
                            sortData();
                            displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });
                    document.querySelectorAll('input[name="typeFilter"], input[name="frequencyFilter"], input[name="assistanceFilter"]').forEach(checkbox => {
                        checkbox.addEventListener('change', () => {
                            filterData();
                            displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });
                }

                function prevPage(event) {
                    event.preventDefault();
                    if (currentPage > 1) {
                        currentPage--;
                        displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function nextPage(event) {
                    event.preventDefault();
                    const totalPages = Math.ceil(getData.length / rowsPerPage);
                    if (currentPage < totalPages) {
                        currentPage++;
                        displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function goToPage(page) {
                    currentPage = page;
                    displayRows(getData, currentPage);
                    displayPagination(getData.length);
                }

                function readInfo(id) {
                    const benefactor = getData.find(item => item.id === id);
                    if (benefactor) {
                        form.benefactorName.value = benefactor.benefactorName;
                        form.benefactorType.value = benefactor.benefactorType;
                        modalTitle.innerHTML = "View Benefactor";
                        formInputFields.forEach(input => input.disabled = true);
                        submitBtn.style.display = "none";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function editInfo(id) {
                    isEdit = true;
                    editId = getData.findIndex(item => item.id === id);
                    const benefactor = getData[editId];
                    if (benefactor) {
                        form.benefactorName.value = benefactor.benefactorName;
                        form.benefactorType.value = benefactor.benefactorType;
                        modalTitle.innerHTML = "Edit Benefactor";
                        formInputFields.forEach(input => input.disabled = false);
                        submitBtn.style.display = "block";
                        submitBtn.innerHTML = "Update";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function deleteInfo(id, e) {
                    if (confirm("Are you sure you want to delete this benefactor?")) {
                        console.log(id);
                        // Remove item from localStorage
                        originalData = originalData.filter(item => item.id !== id);
                        localStorage.setItem('benefactors', JSON.stringify(originalData));
                        
                        // Make a copy of originalData if needed
                        let getData = [...originalData];
                        
                        // Handle deletion via AJAX request
                        $.post(`/benefactors/delete`, {benefactor_id: id})
                        .done((data, status, xhr) => {
                            // Check if deletion was successful
                            if (status === "success" && xhr.status === 200) {
                                // Display success message
                                let index = e?.currentTarget?.closest("tr")?.querySelector("td:first-child")?.textContent;
                                if (index) {
                                    alert("Benefactor with ID " + index + " has been deleted");
                                    }
                                    // Reload the page after deletion
                                    location.reload();
                                    } else {
                                        // Handle deletion failure
                                        alert("Failed to delete benefactor. Please try again.");
                                        }
                                        })
                                        .fail((xhr, status, error) => {
                                            // Handle AJAX request failure
                                            alert("Error deleting benefactor. Please try again later.");
                                            console.error(error);
                                             });
                                             // Remove the table row from the UI
                                             if (e?.currentTarget) {
                                                 e.currentTarget.closest("tr").remove();
                                                 }
                                                 }
                                                 }

                function sortData() {
                    const selectedSort = document.querySelector('input[name="nameSort"]:checked').value;
                    getData.sort((a, b) => {
                        if (selectedSort === 'az') {
                            return a.benefactorName.localeCompare(b.benefactorName);
                        } else {
                            return b.benefactorName.localeCompare(a.benefactorName);
                        }
                    });
                    showInfo();
                }


                 resetFiltersButton.addEventListener('click', () => {
                    document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
                        input.checked = false;
                    });
                    getData = [...originalData];
                    showInfo();
                });

                //displayRows(getData, currentPage);
                displayPagination(getData.length);
                addEventListeners();
            });

             
            function downloadCSV(csv, filename) {
                let csvFile;
                let downloadLink;
                csvFile = new Blob([csv], {
                    type: 'text/csv'
                });

                downloadLink = document.createElement('a');
                downloadLink.download = filename;
                downloadLink.href = window.URL.createObjectURL(csvFile);
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
            }

            function exportTableToCSV(filename) {
                const rows = document.querySelectorAll('.table-container table tr');
                let csv = [];
                for (let i = 0; i < rows.length; i++) {
                    const row = [],
                        cols = rows[i].querySelectorAll('td, th');
                    for (let j = 0; j < cols.length; j++) {
                        const data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
                        row.push('"' + data + '"');
                    }
                    csv.push(row.join(','));
                }
                downloadCSV(csv.join('\n'), filename);
            }
            */
</script>
</body>

</html>
-->
