<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPPWDFI | Benefactors List</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/benefactor-list-style.css">
</head>

<body>
    <div id="wrapper">
        <!-- Wrapper for the entire content -->
        <div class="overlay dark_bg"></div>
        <!-- Overlay for modal background -->

        <!-- Sidebar -->
        <nav class="navbar navbar-inverse fixed-top" id="sidebar-wrapper" role="navigation">
            <ul class="nav sidebar-nav">
                <div class="sidebar-header">
                    <div class="sidebar-brand">
                        <a href="#">Admin</a>
                        <hr class="navbar-solid">
                    </div>
                </div>

                <li><a href="/">Dashboard</a></li>
                <li><a href="/programs">Programs</a></li>
                <li><a href="/beneficiaries">Beneficiary</a></li>
                <li><a href="/benefactors">Benefactor</a></li>
                <li><a href="/benefits">Benefits</a></li>
                <li><a href="/settings">Settings</a></li>
                <li class="logout-link"><a href="#logout"><i class="bi bi-box-arrow-right"></i>  Logout</a></li>
            </ul>
        </nav>
        <!-- /#sidebar-wrapper -->

        <!-- Header section -->
        <div class="bg-half-gradient">
            <header class="bg-gradient">
                <div class="container d-flex align-items-center">
                    <!-- Flex container for alignment -->
                    <div class="menu-icon mr-3" id="menu-toggle">&#9776;</div>
                    <!-- Menu toggle button -->
                    <a href="../views/dashboard.html">
                        <img src="../images/LPPWDFI-Logo.png" alt="Logo" class="logo mr-3">
                        <!-- Organization logo -->
                    </a>
                    <div>
                        <h1 class="org-name">Benefactors</h1>
                        <!-- Page title -->
                    </div>
                </div>

                <div class="addBenefactorBtn">
                    <button>Create</button>
                    <!-- Button to create a new benefactor entry -->
                </div>
            </header>
        </div>
        <!-- End of header section -->

        <!-- Modal form for adding/editing benefactors -->
        <div class="popup">
            <header>
                <h2 class="modalTitle">Fill the Form</h2>
                <span class="closeBtn">&times;</span>
                <!-- Close button for modal -->
            </header>
            <form id="benefactorForm" action="/benefactors/create" method="POST">
                <!-- Form for submitting benefactor information -->
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="benefactorName">Benefactor Name</label>
                        <input type="text" class="form-control" id="benefactorName" name="benefactorName" placeholder="Benefactor Name" required>
                    </div>

                    <div class="form-group col-md-6">
                        <label for="benefactorType">Benefactor Type</label>
                        <select class="form-control" id="benefactorType" name="benefactorType" required>
                            <option value="" selected disabled>Choose...</option>
                            <option value="Type1">Type 1</option>
                            <option value="Type2">Type 2</option>
                            <option value="Type3">Type 3</option>
                            <option value="Type4">Type 4</option>
                        </select>
                    </div>

                    
                </div>
                <input type="submit" class="submitBenefactorBtn" value="Submit">
                <!-- Submit button -->
            </form>
        </div>
        <!-- End of modal form -->

        <!-- Main content section -->
        <main class="main-content">
            <h2 class="main-title">Benefactors List</h2>
            <!-- Title for main content -->
            <div class="button-group">
                <button class="btn export-btn" onclick="exportTableToCSV('Benefactors.csv')">Export to CSV</button>
                <!-- Button to export table data to CSV -->
            </div>

            <!-- Table container -->
            <div class="table-container">
                <button id="resetFiltersButton" class="btn btn-secondary">Reset Filters</button>
                <!-- Button to reset filters -->
                <table class="table table-bordered table-hover">
                    <!-- Table for displaying benefactor data -->
                    <caption>List of Benefactors</caption>
                    <thead class="thead-light">
                        <!-- Table header -->
                        <tr>
                            <th scope="col">#</th>
                            <!-- Column for benefactor name with sorting options -->
                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="benefactorNameDropdown" data-bs-toggle="dropdown" aria-expanded="false">Given By</a>
                                    <ul class="dropdown-menu" aria-labelledby="benefactorNameDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="az" data-criterion="benefactorName" id="benefactorNameSortAZ">
                                                <label class="form-check-label" for="benefactorNameSortAZ">A-Z</label>
                                            </div>
                                        </li>
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="nameSort" value="za" data-criterion="benefactorName" id="benefactorNameSortZA">
                                                <label class="form-check-label" for="benefactorNameSortZA">Z-A</label>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </th>

                            <th scope="col">
                                <div class="dropdown">
                                    <a class="dropdown-toggle" id="typeDropdown" data-bs-toggle="dropdown" aria-expanded="false">Benefactor Type</a>
                                    <ul class="dropdown-menu" aria-labelledby="typeDropdown">
                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type1" id="type1Check" name="typeFilter">
                                                <label class="form-check-label" for="type1Check">Type 1</label>
                                            </div>
                                        </li>

                                        <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type2" id="type2Check" name="typeFilter">
                                                <label class="form-check-label" for="type2Check">Type 2</label>
                                            </div>
                                        </li>

                                         <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type3" id="type3Check" name="typeFilter">
                                                <label class="form-check-label" for="type3Check">Type 3</label>
                                            </div>
                                        </li>

                                         <li>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value="type4" id="type4Check" name="typeFilter">
                                                <label class="form-check-label" for="type4Check">Type 4</label>
                                            </div>
                                        </li>

                                    </ul>
                                </div>
                            </th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>

                    <!-- Handlebars template for populating table rows with benefactors data -->
                    <tbody class="programInfo ">
                        {{#each benefactors}}
                        <tr>
                            <th scope="row ">{{incremented @index}}</th>
                            <!-- Benefactor data -->
                            <td>{{this.name}}</td>
                            <td>{{this.type}}</td>
                            <td>
                               <button class="editBtn" data-id="{{this._id}}"><i class="bi bi-pencil"></i></button>
                                <button class="deleteBtn" data-id="{{this._id}}"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </main>
        <!-- End of main content section -->

        <!-- Pagination controls -->
        <nav aria-label="page-navigation">
            <ul class="pagination">
                <!-- Pagination items will be dynamically added here -->
            </ul>
        </nav>

        <!-- Scripts for functionality and interactivity -->
        <!-- JQuery -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <!-- Bootstrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // DOMContentLoaded event listener for initializing functionality
                document.getElementById("menu-toggle").addEventListener("click", function() {
                    // Toggle sidebar
                    document.getElementById("wrapper").classList.toggle("toggled");
                    document.querySelector(".main-content").classList.toggle("toggled");
                    document.querySelector(".header-right").classList.toggle("toggled");
                });

                // Variables for modal form and table interactions
                var newMemberAddBtn = document.querySelector('.addBenefactorBtn button'),
                    darkBg = document.querySelector('.dark_bg'),
                    popupForm = document.querySelector('.popup'),
                    crossBtn = document.querySelector('.closeBtn'),
                    submitBenefactorBtn = document.querySelector('.submitBenefactorBtn'),
                    modalTitle = document.querySelector('.modalTitle'),
                    form = document.querySelector('#benefactorForm'),
                    formInputFields = document.querySelectorAll('#benefactorForm input, #benefactorForm select'),
                    programInfo = document.querySelector('.programInfo');
                resetFiltersButton = document.getElementById('resetFiltersButton');

                // Retrieve data from local storage or initialize empty array
                let originalData = localStorage.getItem('programs') ? JSON.parse(localStorage.getItem('programs')) : [];
                let getData = [...originalData];

                let isEdit = false,
                    editId;

                newMemberAddBtn.addEventListener('click', () => {
                    // Show form for adding new benefactor
                    isEdit = false;
                    submitBenefactorBtn.innerHTML = "Submit";
                    modalTitle.innerHTML = "Fill the Form";
                    form.reset();
                    formInputFields.forEach(input => input.disabled = false);
                    submitBenefactorBtn.style.display = "block";
                    darkBg.classList.add('active');
                    popupForm.classList.add('active');
                });

                crossBtn.addEventListener('click', () => {
                    // Hide form and reset inputs
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                    submitBenefactorBtn.style.display = "block";
                    formInputFields.forEach(input => input.disabled = false);
                });

                /*
                form.addEventListener('submit', (e) => {
                    // Handle form submission
                    e.preventDefault();
                    const benefactor = {
                        id: Date.now(),
                        benefactorName: form.benefactorName.value,
                        contactNo: form.contactNo.value,
                        sponsor: form.sponsor.value,
                        lgu: form.lgu.value,
                        itemName: form.itemName.value,
                        quantity: form.quantity.value,
                        givenDate: form.date.value
                    };

                    if (!isEdit) {
                        originalData.push(benefactor);
                    } else {
                        originalData[editId] = benefactor;
                    }
                    localStorage.setItem('programs', JSON.stringify(originalData));
                    getData = [...originalData];
                    showInfo();
                    darkBg.classList.remove('active');
                    popupForm.classList.remove('active');
                    form.reset();
                });
                */

                function showInfo() {
                    // Display benefactor information in table and pagination
                    displayRows(getData, currentPage);
                    displayPagination(getData.length);
                    addEventListeners();
                }

                let currentPage = 1;
                const rowsPerPage = 10;

                function displayPagination(totalRows) {
                    // Create pagination controls
                    const pagination = document.querySelector('.pagination');
                    const totalPages = Math.ceil(totalRows / rowsPerPage);

                    pagination.innerHTML = `
                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" aria-label="Previous" id="prevButton">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>`;

                    for (let i = 1; i <= totalPages; i++) {
                        pagination.innerHTML += `
                            <li class="page-item ${currentPage === i ? 'active' : ''}">
                                <a class="page-link paginationButton" href="#">${i}</a>
                            </li>`;
                    }

                    pagination.innerHTML += `
                        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" aria-label="Next" id="nextButton">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>`;

                    document.getElementById("prevButton").addEventListener("click", prevPage);
                    document.getElementById("nextButton").addEventListener("click", nextPage);

                    const paginationButtons = document.getElementsByClassName("paginationButton");
                    for (let i = 0; i < paginationButtons.length; i++) {
                        paginationButtons[i].addEventListener("click", function(event) {
                            event.preventDefault();
                            goToPage(parseInt(this.textContent));
                        });
                    }
                }

                function addEventListeners() {
                    // Add event listeners for various buttons and filters
                    document.querySelectorAll('.viewBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            readInfo(id);
                        });
                    });

                    document.querySelectorAll('.editBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = parseInt(e.currentTarget.getAttribute('data-id'));
                            editInfo(id);
                        });
                    });

                    document.querySelectorAll('.deleteBtn').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.currentTarget.getAttribute('data-id');
                            deleteInfo(id, e);
                        });
                    });

                    document.querySelectorAll('input[name="nameSort"], input[name="itemNameSort"], input[name="quantitySort"], input[name="dateSort"]').forEach(radio => {
                        radio.addEventListener('change', () => {
                            sortData();
                            displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });

                    document.querySelectorAll('input[name="sponsorFilter"], input[name="lguFilter"]').forEach(checkbox => {
                        checkbox.addEventListener('change', () => {
                            filterData();
                            displayRows(getData, currentPage);
                            displayPagination(getData.length);
                        });
                    });
                }

                function prevPage() {
                    // Go to the previous page of pagination
                    if (currentPage > 1) {
                        currentPage--;
                        displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function nextPage() {
                    // Go to the next page of pagination
                    const totalPages = Math.ceil(getData.length / rowsPerPage);
                    if (currentPage < totalPages) {
                        currentPage++;
                        displayRows(getData, currentPage);
                        displayPagination(getData.length);
                    }
                }

                function goToPage(page) {
                    // Go to a specific page of pagination
                    currentPage = page;
                    displayRows(getData, currentPage);
                    displayPagination(getData.length);
                }

                function readInfo(id) {
                    // Read and display benefactor information in the modal form
                    const program = getData.find(item => item.id === id);
                    if (program) {
                        form.benefactorName.value = program.benefactorName;
                        form.contactNo.value = program.contactNo;
                        form.sponsor.value = program.sponsor;
                        form.lgu.value = program.lgu;
                        form.itemName.value = program.itemName;
                        form.quantity.value = program.quantity;
                        form.date.value = program.givenDate;
                        modalTitle.innerHTML = "View Benefactor";
                        formInputFields.forEach(input => input.disabled = true);
                        submitBenefactorBtn.style.display = "none";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function editInfo(id) {
                    // Edit benefactor information in the modal form
                    isEdit = true;
                    editId = getData.findIndex(item => item.id === id);
                    const program = getData[editId];
                    if (program) {
                        form.benefactorName.value = program.benefactorName;
                        form.contactNo.value = program.contactNo;
                        form.sponsor.value = program.sponsor;
                        form.lgu.value = program.lgu;
                        form.itemName.value = program.itemName;
                        form.quantity.value = program.quantity;
                        form.date.value = program.givenDate;
                        modalTitle.innerHTML = "Edit Benefactor";
                        formInputFields.forEach(input => input.disabled = false);
                        submitBenefactorBtn.style.display = "block";
                        submitBenefactorBtn.innerHTML = "Update";
                        darkBg.classList.add('active');
                        popupForm.classList.add('active');
                    }
                }

                function deleteInfo(id, e) {
                    // Delete a benefactor entry
                    if (confirm("Are you sure you want to delete this benefactor?")) {
                        // Remove the benefactor from local storage
                        originalData = originalData.filter(item => item.id !== id);
                        localStorage.setItem('programs', JSON.stringify(originalData));
                        getData = [...originalData];
                        // Assuming you want to also remove the row from the HTML table
                        e.currentTarget.closest("tr").remove();
                        // Perform an AJAX request to delete the benefactor on the server
                        $.post(`/benefactors/delete`, { benefactor_id: id }, (data, status, xhr) => {
                            if (status === "success" && xhr.status === 200) {
                                alert(`Benefactor with ID ${id} has been deleted successfully.`);
                                } else {
                                    alert(`Error: Unable to delete benefactor with ID ${id}.`);
                                    }
                                    location.reload();
                                    });
                                    }
                                    }


                function sortData() {
                    // Sort benefactor data based on selected criteria
                    const selectedSortElement = document.querySelector('input[name="nameSort"]:checked, input[name="itemNameSort"]:checked, input[name="quantitySort"]:checked, input[name="dateSort"]:checked');
                    if (!selectedSortElement) return;

                    const selectedSort = selectedSortElement.value;
                    const criterion = selectedSortElement.getAttribute('data-criterion');

                    getData.sort((a, b) => {
                        if (selectedSort === 'az' || selectedSort === 'asc') {
                            return a[criterion].localeCompare(b[criterion]);
                        } else {
                            return b[criterion].localeCompare(a[criterion]);
                        }
                    });
                    showInfo();
                }

                function filterData() {
                    // Filter benefactor data based on selected criteria
                    const sponsorFilter = document.querySelector('input[name="sponsorFilter"]:checked');
                    const lguFilter = document.querySelector('input[name="lguFilter"]:checked');

                    getData = originalData.filter(item => {
                        return (!sponsorFilter || item.sponsor === sponsorFilter.value) &&
                            (!lguFilter || item.lgu === lguFilter.value);
                    });

                    showInfo();
                }

                var contactNoInput = document.getElementById('contactNo');

                contactNoInput.addEventListener('focus', function() {
                    // Ensure phone number starts with country code
                    if (!contactNoInput.value.startsWith('+63')) {
                        contactNoInput.value = '+63';
                    }
                });

                contactNoInput.addEventListener('input', function() {
                    // Restrict input length and format
                    if (!contactNoInput.value.startsWith('+63')) {
                        contactNoInput.value = '+63' + contactNoInput.value.replace(/^\+63\s*/, '');
                    }
                    if (contactNoInput.value.length > 14) {
                        contactNoInput.value = contactNoInput.value.slice(0, 14);
                    }
                });
            });

                            function downloadCSV(csv, filename) {
                    // Download CSV file
                    let csvFile;
                    let downloadLink;

                    csvFile = new Blob([csv], {
                        type: 'text/csv'
                    });

                    downloadLink = document.createElement('a');
                    downloadLink.download = filename;
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    downloadLink.style.display = 'none';
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                }

                function exportTableToCSV(filename) {
                    // Export table data to CSV
                    const rows = document.querySelectorAll('.table-container table tr');
                    let csv = [];
                    for (let i = 0; i < rows.length; i++) {
                        const row = [],
                            cols = rows[i].querySelectorAll('td, th');
                        for (let j = 0; j < cols.length; j++) {
                            const data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
                            row.push('"' + data + '"');
                        }
                        csv.push(row.join(','));
                    }
                    downloadCSV(csv.join('\n'), filename);
                }
        </script>
</body>

</html>
